#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

[ -z "$MDLT_ORIGIN" ] && echo "LocalConsole: Working in $MMDAPP" >&2
[ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc" 

. "${MDLT_ORIGIN:-$MMDAPP/.local}/myx/myx.distro-.local/sh-lib/LocalContext.include"
DistroLocalContext --run-from-detect

# search: 1) previous path; 2) distro {.local|system|deploy|source} scripts.

if [ -x "$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/bin/myx.common" ] ; then
	PATH="$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/bin:$PATH"
fi

if [ -d "$MDLT_ORIGIN/myx/myx.distro-.local/sh-scripts" ] ; then
	PATH+=":$MDLT_ORIGIN/myx/myx.distro-.local/sh-scripts"

	LocalConsole(){
		bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-.local/sh-lib/console-.local-bashrc.rc" -i "$@"
		return 0
	}
fi

if [ -d "$MDLT_ORIGIN/myx/myx.distro-system/sh-scripts" ] ; then
	PATH+=":$MDLT_ORIGIN/myx/myx.distro-system/sh-scripts"
fi

if [ -d "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-scripts" ] ; then
	PATH+=":$MDLT_ORIGIN/myx/myx.distro-deploy/sh-scripts"

	if [ -t 0 ]; then
		echo "LocalConsole: Type 'DeployConsole' to start Deploy Console." >&2
	fi

	DeployConsole(){
		bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-lib/console-deploy-bashrc.rc" -i "$@"
		return 0
	}
fi

if [ -d "$MDLT_ORIGIN/myx/myx.distro-source/sh-scripts" ] ; then
	PATH+=":$MDLT_ORIGIN/myx/myx.distro-source/sh-scripts"

	if [ -t 0 ]; then
		echo "LocalConsole: Type 'SourceConsole' to start Source Console." >&2
	fi

	SourceConsole(){
		bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc" -i "$@"
		return 0
	}
fi

if [ -d "$MDLT_ORIGIN/myx/myx.distro-remote/sh-scripts" ] ; then
	PATH+=":$MDLT_ORIGIN/myx/myx.distro-remote/sh-scripts"

	if [ -t 0 ]; then
		echo "LocalConsole: Type 'RemoteConsole' to start Remote Console." >&2
	fi

	RemoteConsole(){
		bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-remote/sh-lib/console-remote-bashrc.rc" -i "$@"
		return 0
	}
fi

Help(){
	( . "$MDLT_ORIGIN/myx/myx.distro-.local/sh-lib/help/Help.DistroLocalConsole.include" )
	set +e ; return 1
}

complete -W "\` Local --completion-all \`" ""
complete -W "\` Local --completion-all \`" "*"
complete -W "\` Local --completion-all \`" "which"
complete -W "\` Local --completion-require \`" "Require"
complete -W "\` Local --completion-.local \`" "Local"

export LANG=en_US.UTF-8

PROMPT_COMMAND='set +e ; history -w; history -r ; PS1="$( Local --shell-prompt )"'
export PROMPT_COMMAND PATH
