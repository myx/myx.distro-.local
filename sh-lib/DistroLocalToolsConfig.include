#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only
set -x
### in your scripts you can pull in user overrides via:
###   if [ -f "$MMDAPP/.local/home/$(id -un)/MDLT.settings.env" ]; then
###     . "$MMDAPP/.local/home/$(id -un)/MDLT.settings.env"
###   fi
###
case "$1" in
  --*-config-option)
    local config_file system_file user_file
    local cmd key val ifval curr tmp new

    system_file="$MMDAPP/.local/MDLT.settings.env"
    user_file ="$MMDAPP/.local/home/$(id -un)/MDLT.settings.env"

    # pick target & ensure stub files exist
    case "$1" in
      --system-config-option)
        config_file=$system_file
        mkdir -p "${config_file%/*}" || return 1
        touch "$config_file"
        ;;
      --custom-config-option)
        config_file=$user_file
        mkdir -p "${config_file%/*}" || return 1
        touch "$config_file"
        # bootstrap empty system‐file on first custom touch
        [ -f "$system_file" ] || { mkdir -p "${system_file%/*}"; touch "$system_file"; }
        ;;
      --*-config-option)
        echo "ERROR: unsupported config scope '$1'" >&2
        return 1
        ;;
    esac

    # shift past the scope flag, grab the sub-command
    shift
    cmd=$1; shift

    # prepare temp‐files & ensure cleanup
    tmp="$config_file.$$"
    new="$config_file.new.$$"
    trap 'rm -f -- "$tmp" "$new"' EXIT

    case "$cmd" in
      --select-all)
        grep -h '^[^#].*=' "$config_file" || :
        ;;

      --select)
        if [ "$1" = --all ]; then
          grep -h '^[^#].*=' "$config_file" || :
        else
          { grep -h "^$1=" "$config_file" || :; } \
            | tail -n1 | cut -d= -f2-
        fi
        ;;

      --select-default)
        key=$1; val=$2
        if grep -q "^$key=" "$config_file" 2>/dev/null; then
          { grep -h "^$key=" "$config_file" || :; } \
            | tail -n1 | cut -d= -f2-
        else
          printf '%s\n' "$val"
        fi
        ;;

      --upsert)
        key=$1; val=$2
        grep -v "^$key=" "$config_file" >"$tmp" 2>/dev/null || :
        printf '%s=%s\n' "$key" "$val" >>"$tmp"
        mv "$tmp" "$config_file"
        ;;

      --upsert-if)
        key=$1; val=$2; ifval=$3
        curr=$({ grep -h "^$key=" "$config_file" || :; } \
               | tail -n1 | cut -d= -f2-)
        if [ "$curr" = "$ifval" ]; then
          grep -v "^$key=" "$config_file" >"$tmp" 2>/dev/null || :
          printf '%s=%s\n' "$key" "$val" >>"$tmp"
          mv "$tmp" "$config_file"
        fi
        ;;

      --delete)
        key=$1
        grep -v "^$key=" "$config_file" >"$tmp" 2>/dev/null || :
        mv "$tmp" "$config_file"
        ;;

      --delete-if)
        key=$1; ifval=$2
        curr=$({ grep -h "^$key=" "$config_file" || :; } \
               | tail -n1 | cut -d= -f2-)
        if [ "$curr" = "$ifval" ]; then
          grep -v "^$key=" "$config_file" >"$tmp" 2>/dev/null || :
          mv "$tmp" "$config_file"
        fi
        ;;

      *)
        echo "ERROR: unknown config operation '$cmd'" >&2
        return 1
        ;;
    esac

    return 0
    ;;

  *)
    return 0
    ;;
esac
